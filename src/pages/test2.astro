---
import Layout from "../layouts/BaseLayout.astro";

const pastClients = [
  "Vice Media Group",
  "Cond√© Nast",
  "Adobe Lightroom",
  "AirBnb",
  "Frank & Oak",
  "Hennessy Canada",
  "O'Neill Canada",
];
const services = [
  "UI / UX Design",
  "Web Development",
  "Logo Design & Branding",
  "Brand Strategy",
  "Technical Consultation",
  "App development",
  "E-Commerce",
];
---

<Layout>
  <!-- <div class="content-wrapper">
    <div class="content">
      <div class="trail" style="background-image:url('/images/Favicon.png')"></div>
    </div>
  </div> -->
  <section class="section" id="scroll-area">
    <div class="wrapper">
      <div class="left">
        <div class="sling-header">
          <svg
            id="sling-logo"
            width="911"
            height="549"
            viewBox="0 0 911 549"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              id="sling-letter"
              d="M0 286.783L43.5969 286.783C45.922 309.824 51.1536 327.819 59.2917 340.768C67.6236 353.527 79.4432 363.81 94.7505 371.618C110.058 379.425 127.303 383.329 146.485 383.329C174 383.329 195.314 376.759 210.428 363.62C225.735 350.29 233.389 333.056 233.389 311.919C233.389 299.541 230.579 288.782 224.96 279.642C219.534 270.311 211.203 262.694 199.964 256.79C188.92 250.887 164.893 242.604 127.884 231.94C94.9443 222.418 71.4988 212.802 57.5479 203.09C43.5969 193.378 32.7461 181.096 24.9955 166.242C17.245 151.199 13.3697 134.251 13.3697 115.399C13.3697 81.5026 24.5111 53.7955 46.794 32.2773C69.0768 10.7591 99.1102 0 136.894 0C162.858 0 185.529 5.04631 204.905 15.1389C224.475 25.2315 239.589 39.704 250.246 58.5562C261.097 77.4084 266.721 103.592 267.496 129.109L223.216 129.109C220.891 101.878 212.559 81.693 198.22 68.5536C184.076 55.4142 164.118 48.8444 138.347 48.8444C112.189 48.8444 92.2316 54.6524 78.4743 66.2685C64.7171 77.6941 57.8385 92.5473 57.8385 110.828C57.8385 127.776 62.8764 140.916 72.9521 150.247C83.0278 159.578 105.698 169.004 140.963 178.525C175.453 187.856 199.674 195.949 213.625 202.804C234.939 213.468 251.021 227.56 261.872 245.079C272.723 262.408 278.148 283.164 278.148 307.349C278.148 331.342 272.432 353.241 261 373.046C249.568 392.66 233.97 407.608 214.206 417.891C194.636 428.174 170.997 433.316 143.288 433.316C100.079 433.316 65.5891 420.557 39.8185 395.04C14.2416 369.523 0.968819 330.39 0 286.783Z"
              fill="black"></path>
            <path
              id="sling-letter"
              d="M303.899 425.889V7.141H346.624V425.889H303.899Z"
              fill="black"></path>
            <path
              id="sling-letter"
              d="M384.001 66.2685V7.141H426.726V66.2685H384.001ZM384.001 425.889V122.54H426.726V425.889H384.001Z"
              fill="black"></path>
            <path
              id="sling-letter"
              d="M462.94 425.889V122.54H501.596V165.671C510.897 148.914 522.232 136.441 535.602 128.252C549.165 119.874 564.667 115.684 582.105 115.684C595.669 115.684 608.167 118.35 619.599 123.682C631.224 128.824 640.525 135.679 647.501 144.248C654.67 152.627 659.998 163.576 663.486 177.097C666.974 190.617 668.718 211.374 668.718 239.366V425.889H625.702V241.366C625.702 219.086 623.765 202.804 619.889 192.521C616.014 182.238 609.91 174.336 601.578 168.813C593.44 163.1 583.946 160.244 573.095 160.244C552.556 160.244 536.183 167.766 523.976 182.81C511.769 197.853 505.665 223.656 505.665 260.218V425.889H462.94Z"
              fill="black"></path>
            <path
              id="sling-letter"
              d="M696.503 451.025L738.356 451.026C740.294 467.212 746.107 486.635 755.795 494.443C765.483 502.441 778.95 506.44 796.195 506.44C814.99 506.44 829.91 501.965 840.954 493.015C852.193 484.255 859.846 471.115 863.915 453.596C866.434 442.932 867.694 420.462 867.694 386.185C858.393 399.325 847.93 409.227 836.304 415.892C824.678 422.557 811.793 425.889 797.648 425.889C767.421 425.889 742.329 413.321 722.371 388.185C699.507 359.24 688.075 320.488 688.075 271.929C688.075 239.366 693.113 210.897 703.188 186.523C713.264 162.148 726.44 144.248 742.716 132.823C759.186 121.397 777.594 115.684 797.939 115.684C812.859 115.684 826.422 119.302 838.629 126.538C851.03 133.775 861.978 144.629 871.472 159.101V122.54H911V384.757C911 431.412 907.125 464.641 899.374 484.445C891.624 504.44 878.932 520.15 861.3 531.576C843.667 543.192 822.45 549 797.648 549C764.902 549 739.713 540.336 722.08 523.007C704.448 505.678 695.922 481.684 696.503 451.025ZM732.253 268.787C732.253 308.586 738.938 337.626 752.307 355.907C765.677 374.188 782.05 383.329 801.427 383.329C820.803 383.329 837.273 374.379 850.836 356.479C864.4 338.579 871.182 310.11 871.182 271.072C871.182 232.987 864.206 204.709 850.255 186.237C836.304 167.575 819.35 158.245 799.392 158.245C781.566 158.245 765.871 167.575 752.307 186.237C738.938 204.709 732.253 232.225 732.253 268.787Z"
              fill="black"></path>
          </svg>
        </div>
      </div>
      <div class="right">
        <h3>
          Sling partners with meaningful startups and impassioned individuals,
          reliably developing digital solutions and compelling online
          experiences.
        </h3>
        <br />
        <br />
        <h4>
          We believe in focusing on relationships that foster meaningful work,
          giving projects the careful attention they deserve.
          <br />
          <br />In a sea of online content, we strive to create work that is
          thoughtful, intuitive and lasting. This means taking on projects we
          believe in, for people we care about.
        </h4>
        <!-- <div class="details">
          <h4>Past clients include:</h4>
          <div class="details-flex">
            {
              pastClients.map((client) => (
                <span class="details-item">{client}</span>
              ))
            }
          </div>
        </div> -->
        <div class="details">
          <h4>Services:</h4>
          <div class="details-flex">
            {
              services.map((service) => (
                <span class="details-item">{service}</span>
              ))
            }
          </div>
        </div>
        <div class="details">
          <h4>Contact us:</h4>
          <div class="contact-flex">
            <a href="mailto:hello@sling.online">hello@sling.online</a>
            <a href="https://www.instagram.com/sling.online/">@sling.online</a>
          </div>
        </div>
        <!-- <button class="contact" id="copy-button">
          <svg
            width="26"
            height="25"
            viewBox="0 0 26 25"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <g clip-path="url(#clip0_2001_277)">
              <path
                d="M21.9215 4.73686L17.6518 0.653437C17.4743 0.470752 17.2619 0.325721 17.0271 0.227015C16.7924 0.128309 16.5401 0.0779549 16.2855 0.0789638H10.0749C9.56832 0.0911261 9.08656 0.300958 8.7326 0.663617C8.37865 1.02628 8.18058 1.51299 8.18073 2.01975V19.0987C8.18073 19.6134 8.3852 20.1071 8.74917 20.471C9.11314 20.835 9.60679 21.0395 10.1215 21.0395H20.5552C21.0699 21.0395 21.5636 20.835 21.9275 20.471C22.2915 20.1071 22.496 19.6134 22.496 19.0987V6.10317C22.497 5.84851 22.4466 5.59626 22.3479 5.36149C22.2492 5.12673 22.1042 4.91429 21.9215 4.73686ZM20.5552 19.0987H10.1215V2.01975H14.3447V6.10317C14.3447 6.6179 14.5491 7.11155 14.9131 7.47552C15.2771 7.83949 15.7707 8.04396 16.2855 8.04396H20.5552V19.0987ZM20.5552 6.10317H16.2855V2.01975L20.5552 6.10317Z"
                fill="#5A5B0B"></path>
              <path
                d="M16.6724 22.9805H6.2387V5.90157H7.18581V3.96078H6.2387C5.72397 3.96078 5.23033 4.16526 4.86636 4.52923C4.50239 4.8932 4.29791 5.38684 4.29791 5.90157V22.9805C4.29791 23.4953 4.50239 23.9889 4.86636 24.3529C5.23033 24.7168 5.72397 24.9213 6.2387 24.9213H16.6724C17.1871 24.9213 17.6808 24.7168 18.0447 24.3529C18.4087 23.9889 18.6132 23.4953 18.6132 22.9805V22.0024H16.6724V22.9805Z"
                fill="#5A5B0B"></path>
            </g>
            <defs>
              <clipPath id="clip0_2001_277">
                <rect
                  width="24.8421"
                  height="24.8421"
                  fill="white"
                  transform="translate(0.973694 0.078949)"></rect>
              </clipPath>
            </defs>
          </svg>
          <span id="text-to-copy"> hello@sling.online</span>
        </button> -->
      </div>
    </div>
  </section>
</Layout>

<style lang="scss" is:global>
  .content-wrapper {
    display: flex;
    flex-direction: column;
    position: fixed;
    height: 100vh;
    width: 100vw;
    top: 0;
    left: 0;
  }

  .content {
    flex: 1;
    display: grid;
    place-items: center;
  }
  .trail {
    opacity: 0.3;
    position: relative;
    display: grid;
    place-items: center;
  }

  .no-js .trail {
    width: 250px;
    height: 375px;
    background-size: cover;
  }

  .trail__img {
    // border: 1px solid red!important;
    max-height: 45vh;
    position: relative;
    will-change: transform;
    grid-area: 1 / 1 / 2 / 2;
    mix-blend-mode: exclusion;
    filter: invert(1);
  }
  @media screen and (min-width: 53em) {
    .content-wrapper {
      height: 100vh;
      display: flex;
      flex-direction: column;
    }
  }

  .sling-header {
    position: absolute;
    top: 0;
    left: 0;
    display: grid;
    place-items: center;

    // outline: 1px solid red;
    width: 90%;
    margin: 0 auto;

    svg {
      display: block;
      // outline: 1px solid red;
      width: 90%;
      margin: 0 auto;
      margin-right: 5vw;
    }
  }

  .section {
    width: 95%;
    margin: 0 auto;

    h3,
    h4 {
      font-family: "Arial";
      font-weight: 300;
    }
    h3 {
      font-size: 42px;
      letter-spacing: unset;
    }
    h4 {
      font-size: 32px;
      line-height: 130%;
      letter-spacing: unset;
      color: #949494;
      margin-bottom: 7.5rem;
    }
  }

  .wrapper {
    position: relative;
    display: flex;
  }
  .left {
    flex: 0.75;
    position: sticky;
    top: 0;
    left: 0;
    height: 100vh;
  }

  .right {
    flex: 1;
    // padding-top: 17vh;
    padding-top: 5vh;
  }

  .details {
    margin: 3rem 0;
    max-width: 700px;
    h4 {
      margin-bottom: 1rem;
      font-size: 20px;
      font-family: Arial, sans-serif;
      letter-spacing: -0.01rem;
      color: unset;
    }
    a {
      font-size: 24px;
      padding-bottom: 0.25rem;
      font-family: "Arial-narrow";
      display: block;
    }
    a:last-child {
      margin-bottom: 0;
    }
    a:hover {
      filter: brightness(1.5);
    }
  }

  .details-flex {
    display: inline-flex;
    align-items: flex-start;
    align-content: flex-start;
    gap: 9px;
    flex-wrap: wrap;
  }
  .contact-flex {
    display: inline-flex;
    flex-direction: column;
  }

  .details-item {
    border-radius: 4px;
    padding: 6px 14px;
    font-size: 16px;
    letter-spacing: 0.015rem;
    font-family: "Arial-narrow";
    background: var(--grey-50);
    color: var(--grey-200);
  }

  .contact {
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 7px;
    border-radius: 22px;
    border: 1px solid #e1e31b;
    background: linear-gradient(180deg, #f5f83d 0%, #e1e31b 100%);
    box-shadow:
      0px 0px 1px 1px rgba(255, 255, 255, 0.85) inset,
      0px -1px 1px 1px #b3b515 inset;
    width: 100%;
    margin: 6rem auto;
    margin-bottom: 9rem;
    padding: 3rem;
    font-family: Arial, sans-serif;
    font-size: 32px;
    color: #5a5b0b;
    transition: 0.15s all ease;
  }

  .contact:hover {
    box-shadow:
      0px 1px 5px 1px rgba(255, 255, 255, 0.85) inset,
      0px 1px 3px 1px #b3b515 inset;

    transform: translateY(2px);
  }

  @media (max-width: 992px) {
    .sling-header {
      position: relative;
      font-size: 70px;
      letter-spacing: -0.02rem;
    }

    .wrapper {
      display: block;
    }
    .details {
      margin: 3rem 0;
      h4,
      a {
        font-size: 20px;
      }
    }
    .details-item {
      border-radius: 4px;
      padding: 3px 9px;
      font-size: 15px;
    }
    .contact {
      padding: 1rem;
      font-size: 20px;
      border-radius: 8px;
    }
  }

  #sling-logo {
    transform: translateX(-1000px);
  }
</style>

<script>
  import { animate, stagger, scroll, spring } from "motion";
  const charParent = document.querySelector("#sling-logo");
  const char = document.querySelectorAll("#sling-letter");

  animate(
    charParent,
    {
      transform: `translateX(0px)`,
    },
    {
      duration: 1.5,
      // delay: stagger(0.25),
    }
  );

  const bg = document.querySelector(".section");

  let clickCount = 0;

  bg.addEventListener("click", () => {
    const SKEW_AMOUNT = 5;

    clickCount += SKEW_AMOUNT;
    clickCount = Math.min(clickCount, 90);

    bg.style.transform = `rotateX(${clickCount}deg) rotateY(${clickCount}deg) rotateZ(${clickCount}deg)`;
  });
</script>

<script>
  /**
   * Linear interpolation
   * @param {Number} a - first value to interpolate
   * @param {Number} b - second value to interpolate
   * @param {Number} n - amount to interpolate
   */
  const lerp = (a, b, n) => (1 - n) * a + n * b;

  /**
   * Gets the cursor position
   * @param {Event} ev - mousemove event
   */
  const getCursorPos = (e) => {
    return {
      x: e.clientX,
      y: e.clientY,
    };
  };

  /**
   * Map number x from range [a, b] to [c, d]
   */
  const map = (x, a, b, c, d) => ((x - a) * (d - c)) / (b - a) + c;

  /**
   * Calculates the viewport size
   */

  const calcWinsize = () => {
    const wrapper = document.querySelector(".content-wrapper");

    return {
      width: wrapper.clientWidth,
      height: wrapper.clientHeight,
    };
  };

  // Viewport size
  let winsize = calcWinsize();
  console.log(winsize);
  // Re-calculate on resize
  window.addEventListener("resize", () => (winsize = calcWinsize()));

  // Track the cursor position
  let cursor = { x: winsize.width / 2, y: winsize.height / 2 };
  window.addEventListener("mousemove", (e) => (cursor = getCursorPos(e)));

  /**
   * Class representing an element that follows the cursor
   * and shows a set of image elements following along,
   * each one with different delays.
   */
  class ImageTrailEffect {
    // DOM elements
    DOM = {
      // Main element (.trail)
      el: null,
      // Trail elements (.trail__img)
      trailElems: null,
    };
    // the image path
    bgImage;
    // option defaults
    defaults = {
      // 3d
      perspective: false,
      // Total number of inner image elements
      totalTrailElements: 5,
      // How much to translate and rotate the images (in both the x and y axis)
      valuesFromTo: {
        x: [-90, 90],
        y: [-90, 90],
        rx: [0, 0],
        ry: [0, 0],
        rz: [0, 0],
        scaleX: [0, 0],
      },
      // Use different opacities for the inner images
      opacityChange: false,
      // The "amt" is the amount to interpolate.
      // With interpolation, we can achieve a smooth animation effect when moving the cursor.
      // this is the amt value for the trail image that is on top of the stack. (the one with higher opacity)
      amt: (pos) => 0.02 * pos + 0.05,
      // We can also pass amtMain to override the default value for the image on top of the stack (by default it is the one with the highest amt value, meaning it's the fastest one moving)
      // amtMain deafults to: amt(totalTrailElements - 1)
    };
    // Array to store the transform values for each image element
    imgTransforms = [];

    /**
     * Constructor.
     * @param {Element} DOM_el - the .trail element
     */
    constructor(DOM_el, options) {
      this.DOM.el = DOM_el;
      this.options = Object.assign(this.defaults, options);
      // Create the HTML markup for the image trail elements
      this.layout();
      // Initialize the image transforms array
      this.imgTransforms = [...new Array(this.options.totalTrailElements)].map(
        () => ({ x: 0, y: 0, rx: 0, ry: 0, rz: 0, scaleX: 0 })
      );

      requestAnimationFrame(() => this.render());
    }
    /**
     * Creates the HTML markup for the image trail elements
     */
    layout() {
      // Get the main element's background image url
      this.bgImage = /(?:\(['"]?)(.*?)(?:['"]?\))/.exec(
        this.DOM.el.style.backgroundImage
      )[1];

      // Remove the background image from the main element
      this.DOM.el.style.backgroundImage = "none";

      let innerHTML = "";
      for (let i = 0; i <= this.options.totalTrailElements - 1; ++i) {
        const opacityVal =
          i === this.options.totalTrailElements - 1
            ? 1
            : (1 / this.options.totalTrailElements) * i +
              1 / this.options.totalTrailElements;
        innerHTML += `<img class="trail__img" src="${
          this.bgImage
        }" style="opacity: ${this.options.opacityChange ? opacityVal : 1}"/>`;
      }
      // Append to the main element
      this.DOM.el.innerHTML = innerHTML;

      // Get inner .trail__img elements
      this.DOM.trailElems = this.DOM.el.querySelectorAll(".trail__img");

      // 3d
      if (this.options.perspective) {
        this.DOM.el.style.perspective = `${this.options.perspective}px`;
      }
    }
    /**
     * Loop / Interpolation
     */
    render() {
      for (let i = 0; i <= this.options.totalTrailElements - 1; ++i) {
        let amt =
          i < this.options.totalTrailElements - 1
            ? this.options.amt(i)
            : this.options.amtMain
              ? this.options.amtMain
              : this.options.amt(this.options.totalTrailElements - 1);

        // Apply interpolated values (smooth effect)
        this.imgTransforms[i].x = lerp(
          this.imgTransforms[i].x,
          map(
            cursor.x,
            0,
            winsize.width,
            this.options.valuesFromTo.x[0],
            this.options.valuesFromTo.x[1]
          ),
          amt
        );
        this.imgTransforms[i].y = lerp(
          this.imgTransforms[i].y,
          map(
            cursor.y,
            0,
            winsize.height,
            this.options.valuesFromTo.y[0],
            this.options.valuesFromTo.y[1]
          ),
          amt
        );

        this.imgTransforms[i].rz = lerp(
          this.imgTransforms[i].rz,
          map(
            cursor.x,
            0,
            winsize.width,
            this.options.valuesFromTo.rz[0],
            this.options.valuesFromTo.rz[1]
          ),
          amt
        );
        this.imgTransforms[i].rx = !this.options.perspective
          ? 0
          : lerp(
              this.imgTransforms[i].rx,
              map(
                cursor.y,
                0,
                winsize.height,
                this.options.valuesFromTo.rx[0],
                this.options.valuesFromTo.rx[1]
              ),
              amt
            );
        this.imgTransforms[i].ry = !this.options.perspective
          ? 0
          : lerp(
              this.imgTransforms[i].ry,
              map(
                cursor.x,
                0,
                winsize.width,
                this.options.valuesFromTo.ry[0],
                this.options.valuesFromTo.ry[1]
              ),
              amt
            );
        this.imgTransforms[i].scaleX = !this.options.perspective
          ? 0
          : lerp(
              this.imgTransforms[i].scaleX,
              map(
                cursor.x,
                0,
                winsize.width,
                this.options.valuesFromTo.scaleX[0],
                this.options.valuesFromTo.scaleX[1]
              ),
              amt
            );

        this.DOM.trailElems[i].style.transform =
          `translateX(${this.imgTransforms[i].x}px) translateY(${this.imgTransforms[i].y}px) rotateX(${this.imgTransforms[i].rx}deg) rotateY(${this.imgTransforms[i].ry}deg) rotateZ(${this.imgTransforms[i].rz}deg)`;
      }

      // loop...
      requestAnimationFrame(() => this.render());
    }
  }

  // Initialize trail effect
  new ImageTrailEffect(document.querySelector(".trail"), {
    perspective: 250,
    totalTrailElements: 10,
    valuesFromTo: {
      x: [-550, 550],
      y: [-180, 180],
      rx: [-0, 0],
      ry: [-10, 10],
      rz: [-0, 0],
      scaleX: [0, 1],
    },
    // opacityChange: true,
    // amt: pos => 0.02*pos + 0.05,
    // amtMain: 0.2
  });
</script>
